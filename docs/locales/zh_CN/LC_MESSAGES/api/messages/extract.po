# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, The Babel Team
# This file is distributed under the same license as the Babel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Babel 2.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 09:14+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/messages/extract.rst:2
msgid "Low-Level Extraction Interface"
msgstr ""

#: ../../api/messages/extract.rst:6
msgid ""
"The low level extraction interface can be used to extract from "
"directories or files directly.  Normally this is not needed as the "
"command line tools can do that for you."
msgstr ""

#: ../../api/messages/extract.rst:11
msgid "Extraction Functions"
msgstr ""

#: ../../api/messages/extract.rst:13
msgid ""
"The extraction functions are what the command line tools use internally "
"to extract strings."
msgstr ""

#: babel.messages.extract.extract_from_dir:1 of
msgid "Extract messages from any source files found in the given directory."
msgstr ""

#: babel.messages.extract.extract_from_dir:3 of
msgid ""
"This function generates tuples of the form ``(filename, lineno, message, "
"comments, context)``."
msgstr ""

#: babel.messages.extract.extract_from_dir:6 of
msgid ""
"Which extraction method is used per file is determined by the "
"`method_map` parameter, which maps extended glob patterns to extraction "
"method names. For example, the following is the default mapping:"
msgstr ""

#: babel.messages.extract.extract_from_dir:14 of
msgid ""
"This basically says that files with the filename extension \".py\" at any"
" level inside the directory should be processed by the \"python\" "
"extraction method. Files that don't match any of the mapping patterns are"
" ignored. See the documentation of the `pathmatch` function for details "
"on the pattern syntax."
msgstr ""

#: babel.messages.extract.extract_from_dir:20 of
msgid ""
"The following extended mapping would also use the \"genshi\" extraction "
"method on any file in \"templates\" subdirectory:"
msgstr ""

#: babel.messages.extract.extract_from_dir:28 of
msgid ""
"The dictionary provided by the optional `options_map` parameter augments "
"these mappings. It uses extended glob patterns as keys, and the values "
"are dictionaries mapping options names to option values (both strings)."
msgstr ""

#: babel.messages.extract.extract_from_dir:32 of
msgid ""
"The glob patterns of the `options_map` do not necessarily need to be the "
"same as those used in the method mapping. For example, while all files in"
" the ``templates`` folders in an application may be Genshi applications, "
"the options for those files may differ based on extension:"
msgstr ""

#: babel.messages.extract.extract babel.messages.extract.extract_from_dir
#: babel.messages.extract.extract_from_file
#: babel.messages.extract.extract_javascript
#: babel.messages.extract.extract_python of
msgid "Parameters"
msgstr ""

#: babel.messages.extract.extract_from_dir:47 of
msgid ""
"the path to the directory to extract messages from.  If not given the "
"current working directory is used."
msgstr ""

#: babel.messages.extract.extract_from_dir:49 of
msgid ""
"a list of ``(pattern, method)`` tuples that maps of extraction method "
"names to extended glob patterns"
msgstr ""

#: babel.messages.extract.extract:33 babel.messages.extract.extract_from_dir:51
#: babel.messages.extract.extract_from_file:15
#: babel.messages.extract.extract_python:12 of
msgid "a dictionary of additional options (optional)"
msgstr ""

#: babel.messages.extract.extract:27 babel.messages.extract.extract_from_dir:52
#: babel.messages.extract.extract_from_file:7 of
msgid ""
"a dictionary mapping keywords (i.e. names of functions that should be "
"recognized as translation functions) to tuples that specify which of "
"their arguments contain localizable strings"
msgstr ""

#: babel.messages.extract.extract_from_dir:56 of
msgid ""
"a list of tags of translator comments to search for and include in the "
"results"
msgstr ""

#: babel.messages.extract.extract_from_dir:58 of
msgid ""
"a function that is called for every file that message are extracted from,"
" just before the extraction itself is performed; the function is passed "
"the filename, the name of the extraction method and and the options "
"dictionary as positional arguments, in that order"
msgstr ""

#: babel.messages.extract.extract:34 babel.messages.extract.extract_from_dir:63
#: babel.messages.extract.extract_from_file:13 of
msgid ""
"a flag that if set to `True` causes all comment tags to be removed from "
"the collected comments."
msgstr ""

#: babel.messages.extract.extract_from_dir of
msgid "see"
msgstr ""

#: babel.messages.extract.extract_from_dir:65 of
msgid "`pathmatch`"
msgstr ""

#: babel.messages.extract.extract_from_file:1 of
msgid "Extract messages from a specific file."
msgstr ""

#: babel.messages.extract.extract_from_file:3 of
msgid ""
"This function returns a list of tuples of the form ``(lineno, message, "
"comments, context)``."
msgstr ""

#: babel.messages.extract.extract_from_file:5 of
msgid "the path to the file to extract messages from"
msgstr ""

#: babel.messages.extract.extract_from_file:6 of
msgid "a string specifying the extraction method (.e.g. \"python\")"
msgstr ""

#: babel.messages.extract.extract:31
#: babel.messages.extract.extract_from_file:11
#: babel.messages.extract.extract_javascript:7
#: babel.messages.extract.extract_python:10 of
msgid "a list of translator tags to search for and include in the results"
msgstr ""

#: babel.messages.extract.extract babel.messages.extract.extract_from_file of
msgid "Returns"
msgstr ""

#: babel.messages.extract.extract_from_file:16 of
msgid "list of tuples of the form ``(lineno, message, comments, context)``"
msgstr ""

#: babel.messages.extract.extract babel.messages.extract.extract_from_file
#: babel.messages.extract.extract_python of
msgid "Return type"
msgstr ""

#: babel.messages.extract.extract:1 of
msgid ""
"Extract messages from the given file-like object using the specified "
"extraction method."
msgstr ""

#: babel.messages.extract.extract:4 of
msgid ""
"This function returns tuples of the form ``(lineno, message, comments, "
"context)``."
msgstr ""

#: babel.messages.extract.extract:6 of
msgid ""
"The implementation dispatches the actual extraction to plugins, based on "
"the value of the ``method`` parameter."
msgstr ""

#: babel.messages.extract.extract:19 of
msgid ""
"an extraction method (a callable), or a string specifying the extraction "
"method (.e.g. \"python\"); if this is a simple name, the extraction "
"function will be looked up by entry point; if it is an explicit reference"
" to a function (of the form ``package.module:funcname`` or "
"``package.module.funcname``), the corresponding function will be imported"
" and used"
msgstr ""

#: babel.messages.extract.extract:26 of
msgid "the file-like object the messages should be extracted from"
msgstr ""

#: babel.messages.extract.extract of
msgid "Raises"
msgstr ""

#: babel.messages.extract.extract:36 of
msgid "if the extraction method is not registered"
msgstr ""

#: babel.messages.extract.extract:37 of
msgid "iterable of tuples of the form ``(lineno, message, comments, context)``"
msgstr ""

#: ../../api/messages/extract.rst:23
msgid "Language Parsing"
msgstr ""

#: ../../api/messages/extract.rst:25
msgid ""
"The language parsing functions are used to extract strings out of source "
"files.  These are automatically being used by the extraction functions "
"but sometimes it can be useful to register wrapper functions, then these "
"low level functions can be invoked."
msgstr ""

#: ../../api/messages/extract.rst:30
msgid "New functions can be registered through the setuptools entrypoint system."
msgstr ""

#: babel.messages.extract.extract_python:1 of
msgid "Extract messages from Python source code."
msgstr ""

#: babel.messages.extract.extract_python:3 of
msgid ""
"It returns an iterator yielding tuples in the following form ``(lineno, "
"funcname, message, comments)``."
msgstr ""

#: babel.messages.extract.extract_javascript:3
#: babel.messages.extract.extract_python:6 of
msgid "the seekable, file-like object the messages should be extracted from"
msgstr ""

#: babel.messages.extract.extract_javascript:5
#: babel.messages.extract.extract_python:8 of
msgid ""
"a list of keywords (i.e. function names) that should be recognized as "
"translation functions"
msgstr ""

#: babel.messages.extract.extract_python:13 of
msgid "``iterator``"
msgstr ""

#: babel.messages.extract.extract_javascript:1 of
msgid "Extract messages from JavaScript source code."
msgstr ""

#: babel.messages.extract.extract_javascript:9 of
msgid ""
"a dictionary of additional options (optional) Supported options are: * "
"`jsx` -- set to false to disable JSX/E4X support. * `template_string` -- "
"set to false to disable ES6                        template string "
"support."
msgstr ""

#: babel.messages.extract.extract_javascript:9 of
msgid ""
"a dictionary of additional options (optional) Supported options are: * "
"`jsx` -- set to false to disable JSX/E4X support. * `template_string` -- "
"set to false to disable ES6"
msgstr ""

#: babel.messages.extract.extract_javascript:13 of
msgid "template string support."
msgstr ""

#: babel.messages.extract.extract_nothing:1 of
msgid ""
"Pseudo extractor that does not actually extract anything, but simply "
"returns an empty list."
msgstr ""

