# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, The Babel Team
# This file is distributed under the same license as the Babel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Babel 2.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 09:14+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../installation.rst:4
msgid "Installation"
msgstr ""

#: ../../installation.rst:6
msgid ""
"Babel is distributed as a standard Python package fully set up with all "
"the dependencies it needs.  It primarily depends on the excellent `pytz`_"
" library for timezone handling.  To install it you can use ``pip``."
msgstr ""

#: ../../installation.rst:15
msgid "virtualenv"
msgstr ""

#: ../../installation.rst:17
msgid ""
"Virtualenv is probably what you want to use during development, and if "
"you have shell access to your production machines, you'll probably want "
"to use it there, too.  Use ``pip`` to install it::"
msgstr ""

#: ../../installation.rst:23
msgid ""
"If you're on Windows, run it in a command-prompt window with "
"administrator privileges, and leave out ``sudo``."
msgstr ""

#: ../../installation.rst:26
msgid ""
"Once you have virtualenv installed, just fire up a shell and create your "
"own environment.  I usually create a project folder and a `venv` folder "
"within::"
msgstr ""

#: ../../installation.rst:36
msgid ""
"Now, whenever you want to work on a project, you only have to activate "
"the corresponding environment.  On OS X and Linux, do the following::"
msgstr ""

#: ../../installation.rst:41
msgid "If you are a Windows user, the following command is for you::"
msgstr ""

#: ../../installation.rst:45
msgid ""
"Either way, you should now be using your virtualenv (notice how the "
"prompt of your shell has changed to show the active environment)."
msgstr ""

#: ../../installation.rst:48
msgid ""
"Now you can just enter the following command to get Babel installed in "
"your virtualenv::"
msgstr ""

#: ../../installation.rst:53
msgid "A few seconds later and you are good to go."
msgstr ""

#: ../../installation.rst:56
msgid "System-Wide Installation"
msgstr ""

#: ../../installation.rst:58
msgid ""
"This is possible as well, though I do not recommend it.  Just run `pip` "
"with root privileges::"
msgstr ""

#: ../../installation.rst:63
msgid ""
"(On Windows systems, run it in a command-prompt window with administrator"
" privileges, and leave out `sudo`.)"
msgstr ""

#: ../../installation.rst:68
msgid "Living on the Edge"
msgstr ""

#: ../../installation.rst:70
msgid ""
"If you want to work with the latest version of Babel, you will need to "
"use a git checkout."
msgstr ""

#: ../../installation.rst:73
msgid "Get the git checkout in a new virtualenv and run in development mode::"
msgstr ""

#: ../../installation.rst:88
msgid ""
"Make sure to not forget about the ``pip install pytz`` and "
"``import_cldr`` steps because otherwise you will be missing the locale "
"data. The custom setup command will download the most appropriate CLDR "
"release from the official website and convert it for Babel but will not "
"work without ``pytz``."
msgstr ""

#: ../../installation.rst:93
msgid ""
"This will pull also in the dependencies and activate the git head as the "
"current version inside the virtualenv.  Then all you have to do is run "
"``git pull origin`` to update to the latest version.  If the CLDR data "
"changes you will have to re-run ``python setup.py import_cldr``."
msgstr ""

