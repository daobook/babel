# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, The Babel Team
# This file is distributed under the same license as the Babel package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Babel 2.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 09:14+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dev.rst:2
msgid "Babel Development"
msgstr ""

#: ../../dev.rst:4
msgid ""
"Babel as a library has a long history that goes back to the Trac project."
" Since then it has evolved into an independently developed project that "
"implements data access for the CLDR project."
msgstr ""

#: ../../dev.rst:8
msgid ""
"This document tries to explain as best as possible the general rules of "
"the project in case you want to help out developing."
msgstr ""

#: ../../dev.rst:12
msgid "Tracking the CLDR"
msgstr ""

#: ../../dev.rst:14
msgid ""
"Generally the goal of the project is to work as closely as possible with "
"the CLDR data.  This has in the past caused some frustrating problems "
"because the data is entirely out of our hand.  To minimize the "
"frustration we generally deal with CLDR updates the following way:"
msgstr ""

#: ../../dev.rst:19
msgid "bump the CLDR data only with a major release of Babel."
msgstr ""

#: ../../dev.rst:20
msgid "never perform custom bugfixes on the CLDR data."
msgstr ""

#: ../../dev.rst:21
msgid ""
"never work around CLDR bugs within Babel.  If you find a problem in the "
"data, report it upstream."
msgstr ""

#: ../../dev.rst:23
msgid ""
"adjust the parsing of the data as soon as possible, otherwise this will "
"spiral out of control later.  This is especially the case for bigger "
"updates that change pluralization and more."
msgstr ""

#: ../../dev.rst:26
msgid "try not to test against specific CLDR data that is likely to change."
msgstr ""

#: ../../dev.rst:29
msgid "Python Versions"
msgstr ""

#: ../../dev.rst:31
msgid "At the moment the following Python versions should be supported:"
msgstr ""

#: ../../dev.rst:33
msgid "Python 2.7"
msgstr ""

#: ../../dev.rst:34
msgid "Python 3.4 and up"
msgstr ""

#: ../../dev.rst:35
msgid "PyPy tracking 2.7 and 3.2 and up"
msgstr ""

#: ../../dev.rst:37
msgid ""
"While PyPy does not currently support 3.3, it does support traditional "
"unicode literals which simplifies the entire situation tremendously."
msgstr ""

#: ../../dev.rst:40
msgid ""
"Documentation must build on Python 2, Python 3 support for the "
"documentation is an optional goal.  Code examples in the docs preferably "
"are written in a style that makes them work on both 2.x and 3.x with "
"preference to the former."
msgstr ""

#: ../../dev.rst:46
msgid "Unicode"
msgstr ""

#: ../../dev.rst:48
msgid "Unicode is a big deal in Babel.  Here is how the rules are set up:"
msgstr ""

#: ../../dev.rst:50
msgid ""
"internally everything is unicode that makes sense to have as unicode. The"
" exception to this rule are things which on Python 2 traditionally have "
"been bytes.  For example file names on Python 2 should be treated as "
"bytes wherever possible."
msgstr ""

#: ../../dev.rst:54
msgid ""
"Encode / decode at boundaries explicitly.  Never assume an encoding in a "
"way it cannot be overridden.  utf-8 should be generally considered the "
"default encoding."
msgstr ""

#: ../../dev.rst:57
msgid ""
"Dot not use ``unicode_literals``, instead use the ``u''`` string syntax."
"  The reason for this is that the former introduces countless of unicode "
"problems by accidentally upgrading strings to unicode which should not "
"be.  (docstrings for instance)."
msgstr ""

#: ../../dev.rst:63
msgid "Dates and Timezones"
msgstr ""

#: ../../dev.rst:65
msgid ""
"Generally all timezone support in Babel is based on pytz which it just "
"depends on.  Babel should assume that timezone objects are pytz based "
"because those are the only ones with an API that actually work correctly "
"(due to the API problems with non UTC based timezones)."
msgstr ""

#: ../../dev.rst:70
msgid "Assumptions to make:"
msgstr ""

#: ../../dev.rst:72
msgid "use UTC where possible."
msgstr ""

#: ../../dev.rst:73
msgid ""
"be super careful with local time.  Do not use local time without knowing "
"the exact timezone."
msgstr ""

#: ../../dev.rst:75
msgid ""
"`time` without date is a very useless construct.  Do not try to support "
"timezones for it.  If you do, assume that the current local date is "
"assumed and not utc date."
msgstr ""

